■생성 패턴
- 싱승톤 패턴
- 빌더 패턴
 1. 복잡객체 생성
 2. 
- 팩토리 패턴: 구현부와 생성부가 느슨하게 연결됨. 단일책임원칙. 
 *정적 팩토리
  1. 하나의 정적 메서드가 서브 클래스 객체 반환
 *단순 팩토리
 *팩토리 메소드 패턴
 *추상 팩토리
  1. 상호의존적 객체군 생성 시 사용. 
 1 기존 클라이언트를 훼손하지 않고 새로운 기능을 구현하기 위해.
 2 클래스가 약간씩만 다른 경우.
 3. 업캐스팅, 다운캐스팅이 자주 발생할 때.
- 프로토타입
 1. 복잡한 객체를 생성하는 비용이 클 때 사용.
 2. 원형 객체를 미리 생성, 이를 복제해 새 객체 생성하는 방식.
- 오브젝트 풀
■구조 패턴
- 어댑터 
 * 라이브러리/시스템 기능을 사용하려 하나, 그 인터페이스가 혀냊 시스템과 맞지 않을 때
 * 현재 시스템과 사용하고자 하는 시스템간의 호환되지 않는 인터페이스를 중간에 어뎁터 인터페이스를 사용하여 연결해주는 디자인
 * 
 1. Object Adapter 패턴 : 어뎁터 클래스가 Adaptee(어뎁티) 객체를 자신의 멤버로 내포하는 Composition 방식
 2. Class Adapter 패턴 : 어뎁티를 상속함.
- 브릿지
 * 실제 로직을 담은 구현 클래스를 직접 호출하는 게 아니라, 이 구현체로부터 추상층 츨래스를 분리하여 클라이언트는 이 추상층 클래스를 거쳐 구현체 클래스를 사용하도록 하는 방식.
 * 클라이언트가 추상층 클래스를 호출할 때는 어떤 
- 복합체 패턴
 * 개별 객체나 객체들의 그룹을 클라이언트 입장에서 동일하게 취급하고 사용할 수 있게 하는 구조를 갖는 패턴.
 * ex) 디렉토리 내에는 파일과 파일의 묶음(디렉토리)를 포함할 수 있음.
- 데코레이터 패턴
 * 기존 객체의 구조를 보존한 채 부가적 기능을 동적으로 추가하기 위해 사용됨.
 * 보통 클래스에 새로운 기능을 추가하려면 파생 클레스를 만듦.
 * 데코레이터 패턴은 원본 클레스를 상속하고 내부 멤버로 가진 Decorator로 임시로 기능을 추가할 수 있음.
■행위 패턴
- 커맨드
- 책임 연쇄
- 반복자
- 중재자 
- 메멘토
